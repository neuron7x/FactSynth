name: Pages (Coverage + OpenAPI + Demo)
on: { push: { branches: [ main ] }, workflow_dispatch: {} }
permissions: { contents: read, pages: write, id-token: write }
concurrency: { group: "pages", cancel-in-progress: true }
jobs:
build-and-deploy:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v4
- uses: actions/setup-python@v5
with: { python-version: "3.11" }
- run: python -m pip install -U pip && pip install -e .[test] && pytest --cov --cov-report=xml
- run: mkdir -p site/badges site/openapi && python tools/make_badge.py --xml coverage.xml --out site/badges/coverage.svg && cp openapi/openapi.yaml site/openapi/openapi.yaml
- run: |
cat > site/openapi.html <<'HTML' <!doctype html><html><head><meta charset="utf-8"/> <script src="https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js"></script> <title>FactSynth API</title></head><body><redoc spec-url="./openapi/openapi.yaml"></redoc></body></html>
HTML
cat > site/index.html <<'HTML' <!doctype html><html><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/> <title>FactSynth — Live Demo</title></head><body> <h1>FactSynth — Live Demo</h1><p>API: <code id="apiBase"></code></p> <textarea id="prompt" rows="6" cols="80">hello world</textarea><br/> <input id="max" type="number" value="5" min="1"/><button id="run">Generate</button> <pre id="out"></pre><p>Coverage: <img src="./badges/coverage.svg"/></p><p><a href="./openapi.html">OpenAPI Docs</a></p> <script>
function q(n){return new URLSearchParams(location.search).get(n)}
const API = q('api') || (location.origin.includes('github.io') ? '' : location.origin);
document.getElementById('apiBase').textContent = API || '(set ?api=https://host)';
document.getElementById('run').onclick = async ()=>{
const prompt=document.getElementById('prompt').value; const max=parseInt(document.getElementById('max').value||'5',10);
const out=document.getElementById('out'); out.textContent='...';
try{ const r=await fetch((API||'')+'/v1/generate',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt,max_tokens:max})});
const j=await r.json().catch(async()=>({raw:await r.text()})); out.textContent=JSON.stringify(j,null,2);
}catch(e){ out.textContent='Request failed: '+e; } }; </script></body></html>
HTML
- uses: actions/configure-pages@v5
- uses: actions/upload-pages-artifact@v3
with: { path: "./site" }
- uses: actions/deploy-pages@v4
