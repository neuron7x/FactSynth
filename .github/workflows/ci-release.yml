name: CI • Lint • Test • Build • Scan • Push • Release
on:
  pull_request:
    paths: ['**']
  push:
    branches: ['main','feat/**','fix/**','chore/**']
permissions:
  contents: read
  security-events: write
  packages: write
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  PY_FALLBACK: "3.12"
  COV_MIN: "85"
  REGISTRY: ghcr.io
  IMAGE_NAME: factsynth
  IMAGE: ghcr.io/${{ github.repository_owner }}/factsynth
  TAG: ${{ github.sha }}

jobs:
  spectral:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - run: npx spectral lint openapi/openapi.yaml

  pip-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: ${{ env.PY_FALLBACK }} }
      - run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      - run: pip-audit -r requirements.lock

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: ${{ env.PY_FALLBACK }} }
      - name: Detect Python version
        id: pydet
        shell: bash
        run: |
          set -euo pipefail
          V="${PY_FALLBACK:-3.12}"
          if [ -f pyproject.toml ]; then
            V=$(python - <<'PY'
from pathlib import Path
import re
p=Path("pyproject.toml").read_text(encoding="utf-8")
m=re.search(r'requires-python\s*=\s*">=([0-9]+\.[0-9]+)"', p)
print(m.group(1) if m else "3.12")
PY
)
          fi
          echo "version=$V" >> "$GITHUB_OUTPUT"
      - uses: actions/setup-python@v5
        with: { python-version: ${{ steps.pydet.outputs.version }} }
      - name: Ruff & Mypy available
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
          ruff --version && mypy --version
  test:
    runs-on: ubuntu-latest
    needs: [lint, spectral, pip-audit]
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock
          pip install pytest-asyncio
      - name: Write .coveragerc
        run: |
          COV_MIN="${COV_MIN:-85}"
          cat > .coveragerc <<RC
[run]
source = .
omit =
    tests/*
[report]
fail_under = ${COV_MIN}
show_missing = True
RC
      - name: Run tests
        run: pytest -q --maxfail=1 --disable-warnings
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: |
            ${{ env.IMAGE }}:${{ env.TAG }}
            ${{ env.IMAGE }}:latest
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          load: ${{ !(github.event_name == 'push' && github.ref == 'refs/heads/main') }}
  scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE }}:${{ env.TAG }}
          format: sarif
          output: trivy.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
  release:
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - run: echo "Release gating passed — image=${{ env.IMAGE }}:${{ env.TAG }}"
