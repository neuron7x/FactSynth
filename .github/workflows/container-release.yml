name: Container Release
on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  workflow_dispatch:

concurrency:
  group: container-release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read  # required for private repos

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/factsynth
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build & push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ENV=prod

  trivy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Scan image (Trivy v0.33.1)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          trivy-config: tools/trivy/trivy.yaml
          image-ref: ghcr.io/${{ github.repository_owner }}/factsynth@${{ needs.build.outputs.digest }}
          format: sarif
          output: trivy-results.sarif
          exit-code: '1'  # gate on HIGH/CRITICAL
      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy-image

  smoke:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run & probe (exact digest)
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/factsynth@${{ needs.build.outputs.digest }}
          docker run -d --rm -p 8000:8000 --name factsynth "$IMAGE"
          for i in $(seq 1 30); do curl -fsS http://127.0.0.1:8000/v1/healthz && exit 0 || sleep 2; done
          docker logs factsynth; exit 1
