name: CI
on:
  push: { branches: [ main ] }
  pull_request: { branches: [ main ] }

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s --health-timeout 3s --health-retries 5
    timeout-minutes: 25
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    env:
      REDIS_URL: redis://localhost:6379/0
      API_KEY: change-me
      RATE_LIMIT_REDIS_URL: redis://test
      RATE_LIMIT_PER_KEY: "1000"
      RATE_LIMIT_PER_IP: "1000"
      RATE_LIMIT_PER_ORG: "1000"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v5
        with: { node-version: 'lts/*', cache: 'npm' }

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements.lock
            pyproject.toml

      - name: Install JS deps
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          if [ -f pnpm-lock.yaml ]; then npm i -g pnpm && pnpm i --frozen-lockfile;
          elif [ -f yarn.lock ]; then corepack enable && yarn install --immutable;
          elif [ -f package-lock.json ]; then npm ci;
          else echo "No JS lockfile, skipping strict install"; fi

      - name: Install Python deps
        if: ${{ hashFiles('requirements.txt') != '' || hashFiles('requirements.lock') != '' || hashFiles('pyproject.toml') != '' }}
        run: |
          python -m pip install -U pip
          python -m pip install pip-tools
          if [ -f requirements.lock ]; then pip install -r requirements.lock
          elif [ -f requirements.txt ]; then pip install -r requirements.txt
          fi
          [ -f pyproject.toml ] && pip install -e .[dev] || true

      - name: Check lockfile
        if: ${{ hashFiles('requirements.lock') != '' || hashFiles('pyproject.toml') != '' }}
        run: |
          pip-compile pyproject.toml --allow-unsafe --extra=dev --extra=isr --extra=numpy --generate-hashes --output-file=requirements.lock
          git diff --exit-code requirements.lock

      - name: Check dev requirements
        if: ${{ hashFiles('pyproject.toml') != '' || hashFiles('requirements-dev.txt') != '' }}
        run: |
          if [ -f scripts/update_dev_requirements.sh ]; then
            bash scripts/update_dev_requirements.sh
            git diff --exit-code requirements-dev.txt
          else
            echo "No updater script; skipping."
          fi

      - name: Lint JS
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          npx --yes eslint --version >/dev/null 2>&1 || npm i -D eslint
          if compgen -G ".eslintrc*" > /dev/null || npx --yes eslint --print-config . >/dev/null 2>&1; then
            npx eslint . --max-warnings=0
          else
            echo "No ESLint config; skipping."
          fi

      - name: Ruff
        if: ${{ hashFiles('pyproject.toml') != '' || hashFiles('requirements.txt') != '' }}
        run: |
          pip install ruff
          ruff check .

      - name: Mypy
        if: ${{ hashFiles('pyproject.toml') != '' || hashFiles('requirements.txt') != '' }}
        run: |
          pip install mypy
          mypy .

      - name: Bandit
        if: ${{ hashFiles('pyproject.toml') != '' || hashFiles('requirements.txt') != '' }}
        run: |
          pip install bandit
          bandit -r .

      - name: Safety (PR, fail on high/critical)
        if: ${{ github.event_name == 'pull_request' && (hashFiles('requirements.txt') != '' || hashFiles('requirements.lock') != '' || hashFiles('pyproject.toml') != '') }}
        run: |
          pip install "safety>=3.2.4"
          safety check --full-report ${SFD:+"--policy-file" "$SFD"}
        env:
          SFD: .safety-policy.yml

      - name: Safety (non-PR, report only)
        if: ${{ github.event_name != 'pull_request' && (hashFiles('requirements.txt') != '' || hashFiles('requirements.lock') != '' || hashFiles('pyproject.toml') != '') }}
        continue-on-error: true
        run: |
          pip install safety
          safety check --full-report

      - name: pip-audit (PR, strict)
        if: ${{ github.event_name == 'pull_request' && (hashFiles('requirements.txt') != '' || hashFiles('requirements.lock') != '' || hashFiles('pyproject.toml') != '') }}
        run: |
          pip install pip-audit
          pip-audit --progress-spinner off

      - name: pip-audit (non-PR, report only)
        if: ${{ github.event_name != 'pull_request' && (hashFiles('requirements.txt') != '' || hashFiles('requirements.lock') != '' || hashFiles('pyproject.toml') != '') }}
        continue-on-error: true
        run: |
          pip install pip-audit
          pip-audit --progress-spinner off

      - name: npm audit (high+ only)
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm audit --audit-level=high --omit=dev || true

      - name: Unit tests (JS)
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          if npm run -s | grep -qE '^ *test'; then
            npm test --silent -- --ci || npm run test -- --ci
          else
            echo "No JS test script; skipping."
          fi

      - name: Unit tests (Python)
        if: ${{ hashFiles('tests/**') != '' || hashFiles('pyproject.toml') != '' || hashFiles('requirements.txt') != '' }}
        run: |
          pip install pytest
          pytest -q

      - name: Fairness tests
        if: ${{ hashFiles('fairness_tests/**') != '' }}
        run: |
          pip install pytest
          pytest -q fairness_tests

      - name: Build docs (MkDocs)
        if: ${{ hashFiles('mkdocs.yml') != '' }}
        run: |
          pip install mkdocs mkdocs-material
          mkdocs build -q

      - name: Upload failure artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: ci-failures-${{ matrix.python-version }}
          if-no-files-found: ignore
          path: |
            **/junit*.xml
            **/coverage*
            site/**

  container-scan:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: factsynth:ci
      - uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: factsynth:ci
          format: sarif
          output: trivy.sarif
          severity: HIGH,CRITICAL
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
