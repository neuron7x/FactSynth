name: CI
on:
  push: {}
  pull_request: {}
permissions: { contents: read }
concurrency: { group: ci-${{ github.ref }}, cancel-in-progress: true }
jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
    env:
      API_KEY: change-me
      RATE_LIMIT_REDIS_URL: redis://test
      RATE_LIMIT_PER_KEY: "1000"
      RATE_LIMIT_PER_IP: "1000"
      RATE_LIMIT_PER_ORG: "1000"
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements.lock
            pyproject.toml

      - name: Install JS deps
        if: hashFiles('package.json') != ''
        run: |
          if [ -f pnpm-lock.yaml ]; then npm i -g pnpm && pnpm i --frozen-lockfile;
          elif [ -f yarn.lock ]; then corepack enable && yarn install --immutable;
          elif [ -f package-lock.json ]; then npm ci;
          else echo "No JS lockfile, skipping strict install"; fi

      - name: Install Python deps
        if: hashFiles('requirements.txt','requirements.lock','pyproject.toml') != ''
        run: |
          python -m pip install -U pip
          if [ -f requirements.lock ]; then
            pip install -r requirements.lock
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          [ -f pyproject.toml ] && pip install -e .[dev] || true

      - name: Pre-commit
        run: |
          pip install pre-commit
          pre-commit run --all-files --show-diff-on-failure

      - name: Verify dependency artifacts
        if: hashFiles('pyproject.toml','requirements.lock','requirements-dev.txt') != ''
        run: |
          pre-commit run pip-compile --files pyproject.toml requirements.lock
          scripts/update_dev_requirements.sh
          git diff --exit-code

      - name: Lint JS
        if: hashFiles('package.json') != ''
        run: |
          npx --yes eslint --version >/dev/null 2>&1 || npm i -D eslint
          if [ -f .eslintrc* ] || npx --yes eslint --print-config . >/dev/null 2>&1; then
            npx eslint . --max-warnings=0
          else
            echo "No ESLint config; skipping."
          fi

      - name: Ruff
        if: hashFiles('pyproject.toml','requirements.txt') != ''
        run: |
          pip install ruff
          ruff check .

      - name: Mypy
        if: hashFiles('pyproject.toml','requirements.txt') != ''
        run: |
          pip install mypy
          mypy .

      - name: Bandit
        if: hashFiles('pyproject.toml','requirements.txt') != ''
        run: |
          pip install bandit
          bandit -r .

      - name: Safety (PR, fail on high/critical)
        if: hashFiles('requirements.txt','requirements.lock','pyproject.toml') != ''
        run: |
          pip install safety
          if [ -n "$SFD" ]; then
            safety check --full-report --policy-file "$SFD"
          else
            safety check --full-report
          fi

      - name: pip-audit
        if: hashFiles('requirements.txt','requirements.lock','pyproject.toml') != ''
        run: |
          pip install pip-audit
          pip-audit

      - name: npm audit
        if: hashFiles('package-lock.json') != ''
        run: npm audit --production

      - name: Unit tests (JS)
        if: hashFiles('package.json') != ''
        run: |
          if npm run -s | grep -qE '^ *test'; then
            npm test --silent -- --ci || npm run test -- --ci
          else
            echo "No JS test script; skipping."
          fi

      - name: Unit tests (Python)
        if: hashFiles('tests/**','pyproject.toml','requirements.txt') != ''
        run: |
          pip install pytest pytest-cov
          pytest

      - name: Fairness tests
        if: hashFiles('fairness_tests/**','pyproject.toml','requirements.txt') != ''
        run: |
          pip install pytest
          pytest -q fairness_tests

      - name: Build docs (MkDocs)
        if: hashFiles('mkdocs.yml') != ''
        run: |
          pip install mkdocs mkdocs-material
          mkdocs build -q

      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ci-failures-${{ matrix.python-version }}
          if-no-files-found: ignore
          path: |
            **/junit*.xml
            **/coverage*
            site/**

  science-tests:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install science extras
        run: |
          python -m pip install -U pip
          pip install -e .[science]
          pip install pytest

      - name: Run science tests
        run: pytest tests/test_isr.py

  container-scan:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25
        with:
          context: .
          load: true
          tags: factsynth:ci
      - uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          image-ref: factsynth:ci
          format: sarif
          output: trivy.sarif
          severity: HIGH,CRITICAL
      - uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3
        with:
          sarif_file: trivy.sarif
