I001 [*] Import block is un-sorted or un-formatted
 --> prompts/factsynth_judge/tests/test_bundle.py:1:1
  |
1 | / import json
2 | | from pathlib import Path
  | |________________________^
3 |
4 |   def test_golden_12():
  |
help: Organize imports

PLR2004 Magic value used in comparison, consider replacing `12` with a constant variable
 --> prompts/factsynth_judge/tests/test_bundle.py:7:52
  |
5 |     root = Path(__file__).resolve().parents[1]
6 |     data = json.loads((root / "GOLDEN_12_TESTSET.json").read_text())
7 |     assert isinstance(data, list) and len(data) == 12
  |                                                    ^^
8 |     for item in data:
9 |         assert isinstance(item, dict)
  |

I001 [*] Import block is un-sorted or un-formatted
 --> prompts/github_codex_ops/tests/test_bundle.py:1:1
  |
1 | / import json
2 | | from pathlib import Path
  | |________________________^
3 |
4 |   def test_golden_12():
  |
help: Organize imports

PLR2004 Magic value used in comparison, consider replacing `12` with a constant variable
 --> prompts/github_codex_ops/tests/test_bundle.py:7:52
  |
5 |     root = Path(__file__).resolve().parents[1]
6 |     data = json.loads((root / "GOLDEN_12_TESTSET.json").read_text())
7 |     assert isinstance(data, list) and len(data) == 12
  |                                                    ^^
8 |     for item in data:
9 |         assert "id" in item and "description" in item
  |

B008 Do not perform function call `jnp.array` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
  --> src/factsynth_ultimate/isr/sim.py:46:36
   |
44 |     return alpha * IRS - beta * ES + gamma_param * AS_star + delta * Gamma
45 |
46 | def simulate_isr(S0: jnp.ndarray = jnp.array([1.0, 0.8, 0.5, 0.3, 0.2, 0.1, 0.05]),
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |                  params: ISRParams = ISRParams()) -> Dict[str, jnp.ndarray]:
48 |     term = ODETerm(lambda t, y, _: _ds_dt(t, y, (params.alpha, params.beta, params.gamma_param, params.delta)))
   |

B008 Do not perform function call `ISRParams` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
  --> src/factsynth_ultimate/isr/sim.py:47:38
   |
46 | def simulate_isr(S0: jnp.ndarray = jnp.array([1.0, 0.8, 0.5, 0.3, 0.2, 0.1, 0.05]),
47 |                  params: ISRParams = ISRParams()) -> Dict[str, jnp.ndarray]:
   |                                      ^^^^^^^^^^^
48 |     term = ODETerm(lambda t, y, _: _ds_dt(t, y, (params.alpha, params.beta, params.gamma_param, params.delta)))
49 |     solver = Tsit5()
   |

E702 Multiple statements on one line (semicolon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:9:12
   |
 7 | @dataclass
 8 | class NDMACO:
 9 |     N:int=5; M:int=2; K:float=1.8; sigma:float=0.0
   |            ^
10 |     omega:np.ndarray=None; alpha:np.ndarray=None; adjacency:List[np.ndarray]=field(default_factory=list)
11 |     theta0:np.ndarray=None
   |

E702 Multiple statements on one line (semicolon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:9:21
   |
 7 | @dataclass
 8 | class NDMACO:
 9 |     N:int=5; M:int=2; K:float=1.8; sigma:float=0.0
   |                     ^
10 |     omega:np.ndarray=None; alpha:np.ndarray=None; adjacency:List[np.ndarray]=field(default_factory=list)
11 |     theta0:np.ndarray=None
   |

E702 Multiple statements on one line (semicolon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:9:34
   |
 7 | @dataclass
 8 | class NDMACO:
 9 |     N:int=5; M:int=2; K:float=1.8; sigma:float=0.0
   |                                  ^
10 |     omega:np.ndarray=None; alpha:np.ndarray=None; adjacency:List[np.ndarray]=field(default_factory=list)
11 |     theta0:np.ndarray=None
   |

E702 Multiple statements on one line (semicolon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:10:26
   |
 8 | class NDMACO:
 9 |     N:int=5; M:int=2; K:float=1.8; sigma:float=0.0
10 |     omega:np.ndarray=None; alpha:np.ndarray=None; adjacency:List[np.ndarray]=field(default_factory=list)
   |                          ^
11 |     theta0:np.ndarray=None
   |

E702 Multiple statements on one line (semicolon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:10:49
   |
 8 | class NDMACO:
 9 |     N:int=5; M:int=2; K:float=1.8; sigma:float=0.0
10 |     omega:np.ndarray=None; alpha:np.ndarray=None; adjacency:List[np.ndarray]=field(default_factory=list)
   |                                                 ^
11 |     theta0:np.ndarray=None
   |

E701 Multiple statements on one line (colon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:14:30
   |
13 |     def __post_init__(self):
14 |         if self.omega is None: self.omega = np.ones(self.N)
   |                              ^
15 |         if self.alpha is None: self.alpha = np.zeros(self.M)
16 |         if not self.adjacency:
   |

E701 Multiple statements on one line (colon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:15:30
   |
13 |     def __post_init__(self):
14 |         if self.omega is None: self.omega = np.ones(self.N)
15 |         if self.alpha is None: self.alpha = np.zeros(self.M)
   |                              ^
16 |         if not self.adjacency:
17 |             self.adjacency = [np.eye(self.N) for _ in range(self.M)]
   |

E701 Multiple statements on one line (colon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:18:31
   |
16 |         if not self.adjacency:
17 |             self.adjacency = [np.eye(self.N) for _ in range(self.M)]
18 |         if self.theta0 is None: self.theta0 = np.linspace(0, 2*np.pi, self.N, endpoint=False)
   |                               ^
19 |
20 |     def _drift(self, theta):
   |

E702 Multiple statements on one line (semicolon)
  --> src/factsynth_ultimate/ndmaco/kuramoto.py:32:42
   |
30 |         steps = int(t_max/dt)
31 |         t = np.linspace(0,t_max,steps)
32 |         theta = np.zeros((steps, self.N)); theta[0] = self.theta0
   |                                          ^
33 |         for s in range(1, steps):
34 |             theta[s] = theta[s-1] + self._drift(theta[s-1]) * dt
   |

BLE001 Do not catch blind exception: `Exception`
  --> tests/smoke/test_imports.py:11:16
   |
 9 |             ok = True
10 |             break
11 |         except Exception:
   |                ^^^^^^^^^
12 |             continue
13 |     assert ok, f"Cannot import any of {CANDIDATES}"
   |

C405 Unnecessary list literal (rewrite as a set literal)
 --> tests/test_glrtpm.py:6:12
  |
4 | def test_glrtpm_roundtrip():
5 |     out = GLRTPMPipeline().run("Test thesis about identity reconstruction.")
6 |     assert set(["R","I","P","Omega","metrics"]).issubset(out.keys())
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |     m = out["metrics"]
8 |     assert "coherence" in m and "density" in m and "roles" in m
  |
help: Rewrite as a set literal

E402 Module level import not at top of file
  --> tests/test_isr.py:7:1
   |
 5 |   pytest.importorskip("diffrax")
 6 |
 7 | / from factsynth_ultimate.isr import (
 8 | |     ISRParams,
 9 | |     dominant_freq,
10 | |     estimate_fs,
11 | |     gamma_spectrum,
12 | |     simulate_isr,
13 | | )
   | |_^
14 |
15 |   jnp = jax.numpy
   |

E402 Module level import not at top of file
 --> tests/test_openapi_contract.py:7:1
  |
6 | schemathesis = pytest.importorskip("schemathesis")
7 | from schemathesis import openapi
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | BASE_URL = os.getenv("FACTSYNTH_BASE_URL", "http://127.0.0.1:8000")
  |

PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
  --> tests/test_ws_stream.py:24:25
   |
22 |     assert msgs[1]["t"] == "two"
23 |     assert msgs[2] == {"end": True}
24 |     assert len(msgs) == 3
   |                         ^
   |

E401 [*] Multiple imports on one line
 --> tools/prompt_lint.py:2:1
  |
1 | #!/usr/bin/env python3
2 | import sys, re, pathlib, json
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | REQUIRED_AURELIUS = [
  |
help: Split imports

I001 [*] Import block is un-sorted or un-formatted
 --> tools/prompt_lint.py:2:1
  |
1 | #!/usr/bin/env python3
2 | import sys, re, pathlib, json
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | REQUIRED_AURELIUS = [
  |
help: Organize imports

RUF001 String contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
 --> tools/prompt_lint.py:7:9
  |
5 |     r"Role\s*&\s*Mission",
6 |     r"Capabilities\s*&\s*Non-goals",
7 |     r"IF–THEN\s*Behavior\s*Rules",
  |         ^
8 |     r"Style\s*&\s*Safety\s*Guardrails",
9 |     r"KPI\s*&\s*Monitoring",
  |

RUF001 String contains ambiguous `о` (CYRILLIC SMALL LETTER O). Did you mean `o` (LATIN SMALL LETTER O)?
  --> tools/prompt_lint.py:33:10
   |
31 | ]
32 | FORBIDDEN = [
33 |     r"\bпочекати\b", r"\bwait\b", r"background (task|work)", r"promise to do later"
   |          ^
34 | ]
35 | API_GUARD = r"Do not change FactSynth runtime API"
   |

RUF001 String contains ambiguous `е` (CYRILLIC SMALL LETTER IE). Did you mean `e` (LATIN SMALL LETTER E)?
  --> tools/prompt_lint.py:33:12
   |
31 | ]
32 | FORBIDDEN = [
33 |     r"\bпочекати\b", r"\bwait\b", r"background (task|work)", r"promise to do later"
   |            ^
34 | ]
35 | API_GUARD = r"Do not change FactSynth runtime API"
   |

RUF001 String contains ambiguous `а` (CYRILLIC SMALL LETTER A). Did you mean `a` (LATIN SMALL LETTER A)?
  --> tools/prompt_lint.py:33:14
   |
31 | ]
32 | FORBIDDEN = [
33 |     r"\bпочекати\b", r"\bwait\b", r"background (task|work)", r"promise to do later"
   |              ^
34 | ]
35 | API_GUARD = r"Do not change FactSynth runtime API"
   |

E702 Multiple statements on one line (semicolon)
  --> tools/prompt_lint.py:81:63
   |
79 |     for p, pats in checks:
80 |         if not p.exists():
81 |             print(f"[FAIL] Missing file {p}", file=sys.stderr); ok = False; continue
   |                                                               ^
82 |         ok &= must(p, pats)
83 |         ok &= forbid(p, FORBIDDEN)
   |

E702 Multiple statements on one line (semicolon)
  --> tools/prompt_lint.py:81:75
   |
79 |     for p, pats in checks:
80 |         if not p.exists():
81 |             print(f"[FAIL] Missing file {p}", file=sys.stderr); ok = False; continue
   |                                                                           ^
82 |         ok &= must(p, pats)
83 |         ok &= forbid(p, FORBIDDEN)
   |

E702 Multiple statements on one line (semicolon)
  --> tools/prompt_lint.py:88:56
   |
86 |     g12 = root / "tests" / "golden_12.yaml"
87 |     if not g12.exists():
88 |         print(f"[FAIL] Missing {g12}", file=sys.stderr); ok = False
   |                                                        ^
89 |     if not ok:
90 |         sys.exit(1)
   |

I001 [*] Import block is un-sorted or un-formatted
  --> tools/scripts_calibrate.py:8:1
   |
 6 |   Idempotent; dry-run by default.
 7 |   """
 8 | / from __future__ import annotations
 9 | | import argparse, os, re, sys, textwrap
10 | | from pathlib import Path
   | |________________________^
11 |
12 |   PY_SHEBANG = "#!/usr/bin/env python3\n"
   |
help: Organize imports

E401 [*] Multiple imports on one line
  --> tools/scripts_calibrate.py:9:1
   |
 7 | """
 8 | from __future__ import annotations
 9 | import argparse, os, re, sys, textwrap
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 | from pathlib import Path
   |
help: Split imports

F401 [*] `os` imported but unused
  --> tools/scripts_calibrate.py:9:18
   |
 7 | """
 8 | from __future__ import annotations
 9 | import argparse, os, re, sys, textwrap
   |                  ^^
10 | from pathlib import Path
   |
help: Remove unused import

F401 [*] `sys` imported but unused
  --> tools/scripts_calibrate.py:9:26
   |
 7 | """
 8 | from __future__ import annotations
 9 | import argparse, os, re, sys, textwrap
   |                          ^^^
10 | from pathlib import Path
   |
help: Remove unused import

Found 33 errors.
[*] 8 fixable with the `--fix` option (1 hidden fix can be enabled with the `--unsafe-fixes` option).
